<?php

/**
 * @file openruth.module
 * Drupal implementation of ZRuth's openruth SOAP API
 */

include_once('openruth.features.inc');

/**
 * Implement hook_ding_provider().
 */
function openruth_ding_provider() {
  return array(
    'title' => 'Openruth',
    'settings' => 'openruth_settings_form',
    'provides' => array(
      'availability' => array(
        'prefix' => 'availability',
        'file' => drupal_get_path('module', 'openruth') . '/openruth.availability.inc',
      ),
      'user' => array(
        'prefix' => 'user',
        'file' => drupal_get_path('module', 'openruth') . '/openruth.user.inc',
      ),
      'reservation' => array(
        'prefix' => 'reservation',
        'file' => drupal_get_path('module', 'openruth') . '/openruth.reservation.inc',
      ),
      'loan' => array(
        'prefix' => 'loan',
        'file' => drupal_get_path('module', 'openruth') . '/openruth.loan.inc',
      ),
      'ill' => array(
        'prefix' => 'ill',
        'file' => drupal_get_path('module', 'openruth') . '/openruth.loan.inc',
      ),
      'debt' => array(
        'prefix' => 'debt',
        'file' => drupal_get_path('module', 'openruth') . '/openruth.debt.inc',
      ),
    ),
  );
}

/**
 * Implements hook_ding_devel_timers().
 */
function openruth_ding_devel_timers() {
  return array(
    'openruth' => array(
      'title' => 'Openruth total request time was @time ms.',
    ),
    'openruth_net' => array(
      'title' => 'Openruth net time was @time ms.',
      'include in total' => FALSE,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Add in pincode validation.
 * Attach profile2 form
 */
function openruth_form_user_profile_form_alter(&$form, &$form_state) {
  // Ensure that we're dealing with a provider user.
  if (!ding_user_is_provider_user($form_state['user'])) {
    return;
  }
  global $user;
  $profile2 = profile2_load_by_user($user, 'provider_openruth');
  // attach profile2 form to user_profile_form.
  // profile2 form could be shown by editing people->permissions->profile2, but profile2 adds a tab and we don't want that.
  if (ding_user_is_provider_user($user) && $profile2) {
    $form_state['profiles'] = array('provider_openruth' => $profile2);
    profile2_attach_form($form, $form_state);
  }

  // custom validator
  $form['#validate'][] = 'openruth_profile_form_validate';
}


/**
 * Validate that new pincode is 4 numbers.
 */
function openruth_profile_form_validate(&$form, &$form_state) {
  if (!empty($form_state['values']['pincode'])) {
    if (!preg_match('/^\d{4}$/', $form_state['values']['pincode'])) {
      form_error($form['account']['pincode'], t('Pincode must be four numbers.'));
    }
  }

  if (!empty($form_state['values']['profile_provider_openruth'])) {
    $profile2 = ding_user_provider_profile($form['#user']);
    if (empty($profile2)) {
      return;
    }
    $langs = field_language('profile2', $profile2);
    $index = $langs['field_openruth_mobile_phone'];

    if (!isset($index)) {
      return;
    }

    $mob = isset($form_state['values']['profile_provider_openruth']['field_openruth_mobile_phone'][$index][0]['value']) ?
      $form_state['values']['profile_provider_openruth']['field_openruth_mobile_phone'][$index][0]['value'] : FALSE;
    if ($mob) {
      if (!preg_match('/^\d+$/', $mob)) {
        form_error($form['profile_provider_openruth']['field_openruth_mobile_phone'], t('Mobile number must be digits only'));
      }
    }
  }
}

/**
 * Form callback for provider module settings.
 *
 * This is a regular form callback.
 */
function openruth_settings_form($form, $form_state) {
  $form['openruth'] = array(
    '#type' => 'fieldset',
    '#title' => t('OpenRuth service settings'),
    '#tree' => FALSE,
  );

  $form['openruth']['openruth_wsdl_url'] = array(
    '#type' => 'textfield',
    '#title' => t('OpenRuth WSDL URL'),
    '#description' => t('The WSDL URL for OpenRuth SOAP service, usually something like http://openruth.addi.dk/1.0/openruth.wsdl'),
    '#required' => TRUE,
    '#default_value' => variable_get('openruth_wsdl_url', ''),
  );

  $form['openruth']['openruth_agency_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Agency Id'),
    '#default_value' => variable_get('openruth_agency_id', ''),
    '#description' => t('The OpenRuth agency id of the library.'),
  );

  $form['openruth']['openruth_enable_reservation_deletion'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable reservation deletion'),
    '#default_value' => variable_get('openruth_enable_reservation_deletion', FALSE),
    '#description' => t('Allow users to delete their reservations as well as ready for pickup ones.'),
  );

  $form['openruth']['openruth_enable_logging'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable logging'),
    '#default_value' => variable_get('openruth_enable_logging', FALSE),
    '#description' => t('Logs requests to the OpenRuth webservice. Sensitive information such as CPR number and PIN code is stripped from the requests.'),
  );

  $form['openruth']['blacklist'] = array(
    '#type' => 'fieldset',
    '#title' => t('Placement blacklist'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $placements = array();
  $cid = 'ruth-placements';
  $buffed_placements = cache_get($cid);

  if ($buffed_placements) {
    $placements = $buffed_placements->data;
  }

  if (isset($form_state['triggering_element']) && $form_state['triggering_element']['#name'] == 'fetch-placements') {
    $placements = openruth_allowed_branches();
    cache_set($cid, $placements);
  }

  // Avoid different casing issues.
  foreach ($placements as $k => $placement) {
    unset($placements[$k]);

    $placements[strtolower($k)] = $placement;
  }

  $form['openruth']['blacklist']['openruth_blacked_placements'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Placements'),
    '#description' => t('Select which placements are to be HIDDEN'),
    '#options' => $placements,
    '#default_value' => variable_get('openruth_blacked_placements', array()),
    '#prefix' => '<div id="openruth-placements">',
    '#suffix' => '</div>',
  );

  $form['openruth']['blacklist']['fetch_placements'] = array(
    '#type' => 'button',
    '#name' => 'fetch-placements',
    '#value' => t('Fetch/Update placements'),
    '#ajax' => array(
      'method' => 'replace',
      'wrapper' => 'openruth-placements',
      'effect' => 'fade',
      'callback' => '_openruth_fetch_placements',
    ),
  );

  return system_settings_form($form);
}

/**
 * AJAX callback for placements insertion.
 *
 * @see openruth_settings_form(),
 */
function _openruth_fetch_placements(&$form, &$form_state) {
  return $form['openruth']['blacklist']['openruth_blacked_placements'];
}

/**
 * Submit function. Trim values.
 */
function openruth_settings_form_submit($form, &$form_state) {
  foreach ($form_state['values'] as $name => $value) {
    $form_state['values'][$name] = trim($value);
  }
  system_settings_form_submit($form, $form_state);
}

/**
 * Return an OpenruthClient instance.
 */
function openruth_client() {
  // This is basically a singleton. We also wait until right before
  // instantiating to include our required classes. That seems like a
  // decent performance tradeoff instead of loading everything on every
  // page load.
  static $client;
  if (!isset($client)) {
    $path = drupal_get_path('module', 'openruth');
    require_once($path . '/lib/OpenruthClient/OpenruthClient.class.php');
    $wsdl = variable_get('openruth_wsdl_url', '');
    $agency_id = variable_get('openruth_agency_id', '');
    if (!empty($wsdl) && !empty($agency_id)) {
      try {
        $client = new OpenruthClient($wsdl, $agency_id);
      }
      catch (Exception $e) {
        watchdog('openruth', 'Constructor error: “@message”', array('@message' => $e->getMessage(), WATCHDOG_ERROR));
        $client = NULL;
      }
    }
    else {
      $client = NULL;
    }
  }
  return $client;
}

/**
 * Calls the Openruth backend.
 *
 * @param $method
 *   The desired method.
 * @param ...
 *   Arguments to the method.
 *
 * @return mixed
 *   NULL on error, or the result of the method call.
 */
function openruth_client_invoke($method) {
  $args = func_get_args();
  array_shift($args); // Lose the method.
  $client = openruth_client();
  if (!$client) {
    return NULL;
  }
  try {
    timer_start('openruth');
    $result = call_user_func_array(array($client, $method), $args);
    timer_stop('openruth');
  }
  catch (Exception $e) {
    timer_stop('openruth');
    watchdog('openruth', '@method error: “@message”', array('@method' => $method, '@message' => $e->getMessage()), WATCHDOG_ERROR);
    return NULL;
  }
  return $result;
}

/**
 * Allowed values callback for field.
 */
function openruth_allowed_branches() {
  $branches = openruth_client_invoke('get_agencycounters');
  return $branches;
}

/**
 * Update profile2 with values from Openruth userInfo.
 */
function openruth_profile_update($profile, $userinfo) {
  $langs = field_language('profile2', $profile);
  //preferred branch
  if (isset($profile->openruth_preferred_branch)) {
    $profile->openruth_preferred_branch[$langs['openruth_preferred_branch']][0]['value'] = $userinfo->agencyCounter;
  }

  // reservation pause
  if (isset($profile->field_reservation_pause)) {
    if (isset($userinfo->userAbsenceStartDate) && isset($userinfo->userAbsenceEndDate)) {
      $profile->field_reservation_pause[$langs['field_reservation_pause']][0]['value'] = $userinfo->userAbsenceStartDate;
      $profile->field_reservation_pause[$langs['field_reservation_pause']][0]['value2'] = $userinfo->userAbsenceEndDate;
    }
    else {
      $profile->field_reservation_pause[$langs['field_reservation_pause']][0]['value'] = ' ';
      $profile->field_reservation_pause[$langs['field_reservation_pause']][0]['value2'] = ' ';
    }
  }
  // mobile phone
  if (isset($profile->field_openruth_mobile_phone)) {
    $profile->field_openruth_mobile_phone[$langs['field_openruth_mobile_phone']][0]['value'] = isset($userinfo->userMobilePhone) ? $userinfo->userMobilePhone : '';
  }

  // Send bill by email.
  if (isset($profile->field_openruth_bon_by_email)) {
    $send_bill_by_email = filter_var($userinfo->userBonPrintAsEmail, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE);
    $profile->field_openruth_bon_by_email[$langs['field_openruth_bon_by_email']][0]['value'] = $send_bill_by_email;
  }
}

/**
 * Implements hook_profile2_presave().
 *
 * Sends changes to Openruth and updates profile with real values.
 * sofar only preferred_branch is updateable
 * period of interest is saved locally
 * @todo; is period of interest in zruth
 */
function openruth_profile2_presave($profile2) {
  if (!$profile2->type == 'provider_openruth') {
    return;
  }

  $langs = field_language('profile2', $profile2);

  // preferred branch
  if (!empty($profile2->original->openruth_preferred_branch)) {
    if ($profile2->openruth_preferred_branch != $profile2->original->openruth_preferred_branch) {
      $branch = isset($profile2->openruth_preferred_branch[$langs['openruth_preferred_branch']][0]['value']) ? $profile2->openruth_preferred_branch[$langs['openruth_preferred_branch']][0]['value'] : '_none';
      $changes['preferred_branch'] = $branch;
    }
  }

  // reservation pause
  if (!empty($profile2->original->field_reservation_pause)) {
    if ($profile2->field_reservation_pause != $profile2->original->field_reservation_pause) {

      // if field is empty delete the pause (@todo delete reservation pause doesn't work. fix it)
      if (empty($profile2->field_reservation_pause[$langs['field_reservation_pause']])) {
        $start = '';
        $stop = '';
      }
      else {
        // remove trailing T00:00:00 openruth doesn't understand that
        $start = $profile2->field_reservation_pause[$langs['field_reservation_pause']][0]['value'];
        $start = str_replace('T00:00:00', '', $start);

        $stop = $profile2->field_reservation_pause[$langs['field_reservation_pause']][0]['value2'];
        $stop = str_replace('T00:00:00', '', $stop);
      }

      $org_start = $profile2->original->field_reservation_pause[$langs['field_reservation_pause']][0]['value'];
      $org_start = str_replace('T00:00:00', '', $org_start);

      $org_stop = $profile2->original->field_reservation_pause[$langs['field_reservation_pause']][0]['value2'];
      $org_stop = str_replace('T00:00:00', '', $org_stop);

      if ($start != $org_start || $stop != $org_stop) {
        $changes['reservation_pause_start'] = $start;
        $changes['reservation_pause_stop'] = $stop;
      }
    }
  }

  // mobile phone
  if (!empty($profile2->original->field_openruth_mobile_phone[$langs['field_openruth_mobile_phone']])) {
    if (isset($profile2->field_openruth_mobile_phone[$langs['field_openruth_mobile_phone']][0]['value'])) {
      if ($profile2->field_openruth_mobile_phone[$langs['field_openruth_mobile_phone']][0]['value'] !=
          $profile2->original->field_openruth_mobile_phone[$langs['field_openruth_mobile_phone']][0]['value']) {
        $changes['mobile_phone'] = $profile2->field_openruth_mobile_phone[$langs['field_openruth_mobile_phone']][0]['value'];
      }
    }
  }

  // Bon by email.
  $origin_bill_by_mail = $profile2->original->field_openruth_bon_by_email[$langs['field_openruth_bon_by_email']];
  $new_bill_by_mail = $profile2->field_openruth_bon_by_email[$langs['field_openruth_bon_by_email']];
  if (!empty($origin_bill_by_mail)) {
    if (isset($new_bill_by_mail)) {
      if ($origin_bill_by_mail[0]['value'] != $new_bill_by_mail[0]['value']) {
        $bill_by_mail = ($new_bill_by_mail[0]['value'] == '1') ? TRUE : FALSE;
        $changes['bon_by_email'] = $bill_by_mail;
      }
    }
  }

  if (empty($changes)) {
    return;
  }

  $creds = ding_user_get_creds($profile2);
  $res = openruth_client_invoke('update_userinfo', $creds['name'], $creds['pass'], $changes);

  if ($res !== TRUE) {
    // Call failed, throw exception.
    if (is_string($res)) {
      $exception_message = t('Update userinfo failed, message: @message', array('@message' => $res));
    }
    else {
      $exception_message = t('Update userinfo failed.');
    }
    drupal_set_message($exception_message);
    // throw new Exception($exception_message);
  }

  // Update the profile2 with whatever Openruth says (overrule local saves).
  $creds = ding_user_get_creds($profile2);
  if (($userStatus = _openruth_user_status($creds, TRUE)) && isset($userStatus->userInfo)) {
    openruth_profile_update($profile2, $userStatus->userInfo);
  }
}

/**
 * Implements hook_user_view().
 */
function openruth_user_view($account, $view_mode, $langcode) {
  try {
    $creds = ding_user_get_creds($account);
  }
  catch (DingProviderAuthException $e) {
    $creds = null;
  }
  if (($userStatus = _openruth_user_status($creds)) && isset($userStatus->userInfo)) {
    $userinfo = $userStatus->userInfo;
    $props = array(
      'userFirstName',
      'userLastName',
      'userEmail',
      'userAddress',
      'userPostCode',
      'userCity',
      'userVillage',
      'userTelephone',
      'userMobilePhone',
      'userBonPrintAsEmail',
    );
    foreach ($props as $prop) {
      $data[$prop] = isset($userinfo->$prop) ? $userinfo->$prop : '';
    }

    $account->content['userinfo']['name'] = array(
      '#type' => 'item',
      '#title' => t('Name'),
      '#markup' => join(' ', array_filter(array($data['userFirstName'], $data['userLastName']))),
    );

    $address_parts = array($data['userAddress']);

    // @todo: really, there should be a template for this.
    $account->content['userinfo']['address'] = array(
      '#type' => 'item',
      '#title' => t('Address'),
      '#markup' => '<p>' . $data['userAddress'] . '<br />' . $data['userPostCode'] . ' ' . $data['userCity'] . '</p>',
    );
  }

  openruth_set_profile2_fields($account);
}

/**
 * Set profile2 specific fields for account.
 */
function openruth_set_profile2_fields($account) {
  // avoid dependency on profile2 module
  if (!module_exists('profile2')) {
    return;
  }

  $profile2 = profile2_load_by_user($account, 'provider_openruth');
  if (empty($profile2)) {
    return;
  }

  // wrapper for profile2-fields
  $account->content['profile2'] = array(
    '#type' => 'item',
    //'#title' => t('My library'),
    '#prefix' => '<div class="profile2_provider_fields">',
    '#suffix' => '</div>',
    '#weight' => 10,
  );

  // set preferred branch
  if ($pref_branch =  openruth_get_preferred_branch($profile2)) {
    $account->content['profile2']['preferred_branch'] = array(
      '#type' => 'item',
      '#title' => t('Pickup branch'),
      '#markup' => '<span>' . $pref_branch . '</span>',
    );
  }
  // set interest period
  if ($interest_period = openruth_get_interest_period($profile2)) {
    $account->content['profile2']['interest_period'] = array(
      '#type' => 'item',
      '#title' => t('Interest period'),
      '#markup' => '<span>' . t($interest_period) . '</span>',
    );
  }

  // set mobile phone
  if ($mobile_phone = openruth_get_mobile_phone($profile2)) {
    $account->content['profile2']['mobile_phone'] = array(
      '#type' => 'item',
      '#title' => t('Mobile phone'),
      '#markup' => '<span>' . $mobile_phone . '</span>',
    );
  }

  if ($reservation_pause = openruth_get_reservation_pause($profile2)) {
    // wrapper for reservation pause
    $account->content['profile2']['reservation_pause'] = array(
      '#type' => 'item',
      '#title' => '<h4>' . t('Reservation pause') . '</h4>',
      '#prefix' => '<div class="profile2_provider_reservation_pause">',
      '#suffix' => '</div>',
    );

    $account->content['profile2']['reservation_pause']['start'] = array(
      '#type' => 'item',
      '#title' => t('Start'),
      '#markup' => '<span>' . $reservation_pause['start'] . '</span>',
    );

    $account->content['profile2']['reservation_pause']['stop'] = array(
      '#type' => 'item',
      '#title' => t('Stop'),
      '#markup' => '<span>' . $reservation_pause['stop'] . '</span>',
    );
  }

  $send_bill_by_email = openruth_get_send_bill_by_email($profile2);
  if ($send_bill_by_email) {
    $account->content['profile2']['bon_by_email'] = array(
      '#type' => 'item',
      '#title' => t('Send receipt by email'),
      '#markup' => '<span>' . $send_bill_by_email . '<span>',
    );
  }
}

/**
 * @param $profile2 object
 * @return bool|null|string
 *
 * Return current send bill by email state.
 */
function openruth_get_send_bill_by_email($profile2) {
  $langs = field_language('profile2', $profile2);
  if (empty($profile2->field_openruth_bon_by_email)) {
    return FALSE;
  }

  $send_bill_by_email = $profile2->field_openruth_bon_by_email[$langs['field_openruth_bon_by_email']][0]['value'];
  return ($send_bill_by_email == 1) ? t('Yes') : t('No');
}

/**
 * Get profile2 field; field_openruth_mobile_phone
 */
function openruth_get_mobile_phone($profile2) {
  // get field languages
  $langs = field_language('profile2', $profile2);
  if (empty($profile2->field_openruth_mobile_phone)) {
    return FALSE;
  }

  $mob = $profile2->field_openruth_mobile_phone[$langs['field_openruth_mobile_phone']][0]['value'];
  return $mob;
}


/**
 * Get profile2 field; field_openruth_interest_period
 */
function openruth_get_interest_period($profile2) {
  // get field languages
  $langs = field_language('profile2', $profile2);
  // get field-info to retrieve values for select list
  $field_info = field_info_field('field_openruth_interest_period');

  if (empty($profile2->field_openruth_interest_period)) {
    return FALSE;
  }

  $interest_period = FALSE;
  $int_values = isset($field_info['settings']['allowed_values']) ? $field_info['settings']['allowed_values'] : FALSE;
  if ($int_values) {
    $int_period = $profile2->field_openruth_interest_period[$langs['field_openruth_interest_period']][0]['value'];
    $interest_period = isset($int_values[$int_period]) ? $int_values[$int_period] : FALSE;
  }
  return $interest_period;
}

function openruth_get_interest_periods() {
  $field_info = field_info_field('field_openruth_interest_period');
  $interest_periods = isset($field_info['settings']['allowed_values']) ? $field_info['settings']['allowed_values'] : FALSE;

  return $interest_periods;
}

/**
 * Get profile2 field; openruth_preferred_branch
 */
function openruth_get_preferred_branch($profile2) {
  // get field languages
  $pref = FALSE;
  $langs = field_language('profile2', $profile2);
  if (empty($profile2->openruth_preferred_branch)) {
    return FALSE;
  }
  // get preferred branch
  $pref_branch = $profile2->openruth_preferred_branch[$langs['openruth_preferred_branch']][0]['value'];
  $branches = openruth_allowed_branches();
  $pref = isset($branches[$pref_branch]) ? $branches[$pref_branch] : FALSE;


  return $pref;
}

/**
 * Get profile2 field; field_reservation_pause
 */
function openruth_get_reservation_pause($profile2) {
  // get field languages
  $langs = field_language('profile2', $profile2);
  if (empty($profile2->field_reservation_pause)) {
    return FALSE;
  }

  if (empty($profile2->field_reservation_pause[$langs['field_reservation_pause']])) {
    return false;
  }

  $res_pause['start'] = $profile2->field_reservation_pause[$langs['field_reservation_pause']][0]['value'];
  $res_pause['stop'] = $profile2->field_reservation_pause[$langs['field_reservation_pause']][0]['value2'];

  if (strlen($res_pause['start']) < 2 || strlen($res_pause['stop']) < 2) {
    return false;
  }

  return $res_pause;
}


/**
 * Get user status.
 */
function _openruth_user_status($creds = NULL, $reset = FALSE) {
  if (!$creds) {
    return;
  }

  $cid = hash('sha512', $creds['name'] . $creds['pass']);
  $cache = NULL;

  if ($reset) {
    cache_clear_all($cid, 'cache');
    drupal_static_reset(__FUNCTION__);
  }

  $status = &drupal_static(__FUNCTION__, NULL);
  if (!$status) {
    $cache = cache_get($cid, 'cache');
    if (isset($cache->data)) {
      $status = $cache->data;
    }
    else {
      $status = openruth_client_invoke('user_status', $creds['name'], $creds['pass']);

      if ($status && !is_string($status)) {
        // Don't cache user pass.
        if (isset($status->userInfo) && isset($status->userInfo->userPinCode)) {
          unset($status->userInfo->userPinCode);
        }

        cache_set($cid, $status, 'cache', time() + 300);
      }
      elseif (is_string($status)) {
        watchdog('openruth', t('Error fetching user status @error'), array('@error' => $status), WATCHDOG_ERROR);
      }
    }
  }

  return $status;
}

/**
 * Replace entity for the reservation in the case object in not in Ting anymore.
 *
 * @param $item
 *   Provider reservation object.
 * @return
 *   Ting entity object, filled with data from provider service.
 */
function openruth_replace_entity($item) {
  module_load_include('reservation.inc', 'openruth');

  $faust_number = explode(':', $item->ding_entity_id);
  $faust_number = $faust_number[1];
  $openruth_object = openruth_seek_reserved_item($faust_number);

  if (is_object($openruth_object)) {
    $pseudo_ting_object = new TingEntity();
    $pseudo_ting_object->setLocalId($faust_number);
    $pseudo_ting_object->setDingEntityId($item->ding_entity_id);
    $pseudo_ting_object->setTitle($openruth_object->title);
    // Unfortunately, openruth response doesnt contain anything about the loaned item type.
    //$pseudo_ting_object->reply->record['dc:type']['dkdcplus:BibDK-Type'] = array();
    $pseudo_ting_object->setCreators(array($openruth_object->author));
    $pseudo_ting_object->setDate($openruth_object->publication_year);

    $pseudo_ting_object->ting_cover = array(LANGUAGE_NONE => array(array('local_id' => $item->ding_entity_id)));
    $pseudo_ting_object->ding_entity_type = 'ding_entity';
    $pseudo_ting_object->provider_id = $faust_number;

    return $pseudo_ting_object;
  }

  return FALSE;
}

/**
 * Get a specific reserved item from reservation list.
 *
 * Since openruth doesnt have a direct query mechanism for fetching a loan by
 * a certain id, we munge all the users loans every time it's needed.
 *
 * @param $faust_number
 *   Seeked item faust number.
 * @return
 *   Provider reservation object, containing data about the specific loan.
 */
function openruth_seek_reserved_item($faust_number) {
  global $user;
  $agency = variable_get('openruth_agency_id', '');
  $orders = openruth_reservation_list($user);
  $ding_id = $agency . ':' . $faust_number;
  $item = FALSE;

  foreach ($orders as $order) {
    if ($order->ding_entity_id == $ding_id) {
      $item = $order;
      break;
    }
  }

  return $item;
}

/**
 * Helper function to filter blacked placements setted in BE.
 *
 * @see _openruth_set_holdings(),
 */
function _openruth_filter_blacked($ele) {
  return is_string($ele);
}
